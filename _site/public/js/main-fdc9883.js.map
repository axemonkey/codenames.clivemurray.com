{
  "version": 3,
  "sources": ["../../assets/js/modules/get-data.js", "../../assets/js/modules/spinner-config.js", "../../assets/js/modules/tools.js", "../../assets/js/main.js"],
  "sourcesContent": ["const getData = (objectName, callback) => {\n\tconst xhttp = new XMLHttpRequest();\n\txhttp.onreadystatechange = () => {\n\t\tif (xhttp.readyState === 4 && xhttp.status === 200) {\n\t\t\tcallback(objectName, xhttp.responseText);\n\t\t}\n\t};\n\txhttp.open('GET', `/public/data/${objectName}.json`, true);\n\txhttp.send();\n};\n\nexport {\n\tgetData,\n};\n\n", "const spinnerConfig = {\n\tlines: 13, // The number of lines to draw\n\tlength: 7, // The length of each line\n\twidth: 4, // The line thickness\n\tradius: 10, // The radius of the inner circle\n\tcorners: 1, // Corner roundness (0..1)\n\trotate: 0, // The rotation offset\n\tcolor: '#ddd', // #rgb or #rrggbb\n\tspeed: 1, // Rounds per second\n\ttrail: 60, // Afterglow percentage\n\tshadow: false, // Whether to render a shadow\n\thwaccel: true, // Whether to use hardware acceleration\n\tclassName: 'spin', // The CSS class to assign to the spinner\n\tzIndex: 2e9, // The z-index (defaults to 2000000000)\n\ttop: 'auto', // Top position relative to parent in px\n\tleft: 'auto', // Left position relative to parent in px\n};\n\nexport default spinnerConfig;\n", "const ucfirst = str => {\n\treturn str.slice(0, 1).toUpperCase() + str.slice(1).toLowerCase();\n};\n\nexport {ucfirst};\n", "import {getData} from './modules/get-data.js';\nimport spinnerConfig from './modules/spinner-config.js';\nimport {ucfirst} from './modules/tools.js';\n\n/*\n// eslint-disable-next-line no-warning-comments\nTODO:\n\n* add syllables to all data\n* create \"options\"\n  * force 3 syllables\n\t* select categories\n* \"about\" thing, which says you shouldn't really use this\n\n*/\n\nconst projectNamerData = {\n\tassets: {\n\t\tprefixes: [],\n\t\tanimals: [],\n\t},\n};\n\nconst writeThing = (arrayName, elementClass) => {\n\tconst array = projectNamerData.assets[arrayName];\n\tconst randomThing = array[Math.floor(Math.random() * array.length)];\n\tdocument.querySelector(`.${elementClass}`).textContent = ucfirst(randomThing.title);\n};\n\nconst generate = () => {\n\twriteThing('prefixes', 'prefix');\n\twriteThing('animals', 'animal');\n\n\tconst iterations = 60;\n\tconst currentIteration = 0;\n\n\twriteOneThing(currentIteration, iterations);\n};\n\nconst writeOneThing = (currentIteration, iterations) => {\n\tif (Math.round(Math.random()) < 0.5) {\n\t\twriteThing('prefixes', 'prefix');\n\t} else {\n\t\twriteThing('animals', 'animal');\n\t}\n\n\tconst nextIteration = currentIteration + 1;\n\n\tif (nextIteration < iterations) {\n\t\twindow.setTimeout(() => {\n\t\t\twriteOneThing(nextIteration, iterations);\n\t\t}, nextIteration * 3);\n\t}\n};\n\nconst start = () => {\n\tvar spinster = document.querySelector('.spinner');\n\tspinster.remove();\n\n\tdocument.body.classList.add('js');\n\n\tgenerate();\n};\n\nconst checkLoadedStates = (objectName, response) => {\n\tprojectNamerData.assets[objectName] = JSON.parse(response);\n\tif (projectNamerData.assets.prefixes.length > 0 && projectNamerData.assets.animals.length > 0) {\n\t\tstart();\n\t}\n};\n\nconst initProjectNamer = () => {\n\tconst spinster = document.createElement('div');\n\tconst headline = document.querySelector('h1');\n\tspinster.classList.add('spinner');\n\theadline.after(spinster);\n\tnew Spinner(spinnerConfig).spin(spinster); // eslint-disable-line no-undef\n\n\tdocument.querySelector('.another').addEventListener('click', function (e) {\n\t\te.preventDefault();\n\t\tgenerate();\n\t});\n\tdocument.querySelector('.prefix').addEventListener('click', function () {\n\t\twriteThing('prefixes', 'prefix');\n\t});\n\tdocument.querySelector('.animal').addEventListener('click', function () {\n\t\twriteThing('animals', 'animal');\n\t});\n\n\tgetData('prefixes', checkLoadedStates);\n\tgetData('animals', checkLoadedStates);\n};\n\nwindow.addEventListener('load', initProjectNamer);\n"],
  "mappings": "MAAA,IAAMA,EAAU,CAACC,EAAYC,IAAa,CACzC,IAAMC,EAAQ,IAAI,eAClBA,EAAM,mBAAqB,IAAM,CAC5BA,EAAM,aAAe,GAAKA,EAAM,SAAW,KAC9CD,EAASD,EAAYE,EAAM,YAAY,CAEzC,EACAA,EAAM,KAAK,MAAO,gBAAgB,OAAAF,EAAU,SAAS,EAAI,EACzDE,EAAM,KAAK,CACZ,ECTA,IAAMC,EAAgB,CACrB,MAAO,GACP,OAAQ,EACR,MAAO,EACP,OAAQ,GACR,QAAS,EACT,OAAQ,EACR,MAAO,OACP,MAAO,EACP,MAAO,GACP,OAAQ,GACR,QAAS,GACT,UAAW,OACX,OAAQ,IACR,IAAK,OACL,KAAM,MACP,EAEOC,EAAQD,EClBf,IAAME,EAAUC,GACRA,EAAI,MAAM,EAAG,CAAC,EAAE,YAAY,EAAIA,EAAI,MAAM,CAAC,EAAE,YAAY,ECejE,IAAMC,EAAmB,CACxB,OAAQ,CACP,SAAU,CAAC,EACX,QAAS,CAAC,CACX,CACD,EAEMC,EAAa,CAACC,EAAWC,IAAiB,CAC/C,IAAMC,EAAQJ,EAAiB,OAAOE,CAAS,EACzCG,EAAcD,EAAM,KAAK,MAAM,KAAK,OAAO,EAAIA,EAAM,MAAM,CAAC,EAClE,SAAS,cAAc,IAAI,OAAAD,EAAc,EAAE,YAAcG,EAAQD,EAAY,KAAK,CACnF,EAEME,EAAW,IAAM,CACtBN,EAAW,WAAY,QAAQ,EAC/BA,EAAW,UAAW,QAAQ,EAK9BO,EAFyB,EADN,EAGuB,CAC3C,EAEMA,EAAgB,CAACC,EAAkBC,IAAe,CACnD,KAAK,MAAM,KAAK,OAAO,CAAC,EAAI,GAC/BT,EAAW,WAAY,QAAQ,EAE/BA,EAAW,UAAW,QAAQ,EAG/B,IAAMU,EAAgBF,EAAmB,EAErCE,EAAgBD,GACnB,OAAO,WAAW,IAAM,CACvBF,EAAcG,EAAeD,CAAU,CACxC,EAAGC,EAAgB,CAAC,CAEtB,EAEMC,EAAQ,IAAM,CACnB,IAAIC,EAAW,SAAS,cAAc,UAAU,EAChDA,EAAS,OAAO,EAEhB,SAAS,KAAK,UAAU,IAAI,IAAI,EAEhCN,EAAS,CACV,EAEMO,EAAoB,CAACC,EAAYC,IAAa,CACnDhB,EAAiB,OAAOe,CAAU,EAAI,KAAK,MAAMC,CAAQ,EACrDhB,EAAiB,OAAO,SAAS,OAAS,GAAKA,EAAiB,OAAO,QAAQ,OAAS,GAC3FY,EAAM,CAER,EAEMK,EAAmB,IAAM,CAC9B,IAAMJ,EAAW,SAAS,cAAc,KAAK,EACvCK,EAAW,SAAS,cAAc,IAAI,EAC5CL,EAAS,UAAU,IAAI,SAAS,EAChCK,EAAS,MAAML,CAAQ,EACvB,IAAI,QAAQM,CAAa,EAAE,KAAKN,CAAQ,EAExC,SAAS,cAAc,UAAU,EAAE,iBAAiB,QAAS,SAAUO,EAAG,CACzEA,EAAE,eAAe,EACjBb,EAAS,CACV,CAAC,EACD,SAAS,cAAc,SAAS,EAAE,iBAAiB,QAAS,UAAY,CACvEN,EAAW,WAAY,QAAQ,CAChC,CAAC,EACD,SAAS,cAAc,SAAS,EAAE,iBAAiB,QAAS,UAAY,CACvEA,EAAW,UAAW,QAAQ,CAC/B,CAAC,EAEDoB,EAAQ,WAAYP,CAAiB,EACrCO,EAAQ,UAAWP,CAAiB,CACrC,EAEA,OAAO,iBAAiB,OAAQG,CAAgB",
  "names": ["getData", "objectName", "callback", "xhttp", "spinnerConfig", "spinner_config_default", "ucfirst", "str", "projectNamerData", "writeThing", "arrayName", "elementClass", "array", "randomThing", "ucfirst", "generate", "writeOneThing", "currentIteration", "iterations", "nextIteration", "start", "spinster", "checkLoadedStates", "objectName", "response", "initProjectNamer", "headline", "spinner_config_default", "e", "getData"]
}
