{
  "version": 3,
  "sources": ["../../assets/js/modules/get-data.js", "../../assets/js/modules/spinner-config.js", "../../assets/js/modules/tools.js", "../../assets/js/main.js"],
  "sourcesContent": ["const getData = (objectName, callback, next) => {\n\tconst xhttp = new XMLHttpRequest();\n\txhttp.onreadystatechange = () => {\n\t\tif (xhttp.readyState === 4 && xhttp.status === 200) {\n\t\t\tcallback(objectName, xhttp.responseText, next);\n\t\t}\n\t};\n\txhttp.open(\"GET\", `/public/data/${objectName}.json`, true);\n\txhttp.send();\n};\n\nexport { getData };\n", "const spinnerConfig = {\n\tlines: 13, // The number of lines to draw\n\tlength: 7, // The length of each line\n\twidth: 4, // The line thickness\n\tradius: 10, // The radius of the inner circle\n\tcorners: 1, // Corner roundness (0..1)\n\trotate: 0, // The rotation offset\n\tcolor: \"#ddd\", // #rgb or #rrggbb\n\tspeed: 1, // Rounds per second\n\ttrail: 60, // Afterglow percentage\n\tshadow: false, // Whether to render a shadow\n\thwaccel: true, // Whether to use hardware acceleration\n\tclassName: \"spin\", // The CSS class to assign to the spinner\n\tzIndex: 2e9, // The z-index (defaults to 2000000000)\n\ttop: \"auto\", // Top position relative to parent in px\n\tleft: \"auto\", // Left position relative to parent in px\n};\n\nexport default spinnerConfig;\n", "const ucfirst = (str) => {\n\treturn str.slice(0, 1).toUpperCase() + str.slice(1).toLowerCase();\n};\n\nconst getParamFromURL = (param) => {\n\tlet urlParam;\n\tconst params = new URLSearchParams(document.location.search);\n\tif (params.get(param)) {\n\t\turlParam = decodeURIComponent(params.get(param));\n\t}\n\treturn urlParam;\n};\n\nexport { ucfirst, getParamFromURL };\n", "import { getData } from \"./modules/get-data.js\";\nimport spinnerConfig from \"./modules/spinner-config.js\";\nimport { ucfirst, getParamFromURL } from \"./modules/tools.js\";\n\n/*\n// eslint-disable-next-line no-warning-comments\nTODO:\n\n* add syllables to all data\n* create \"options\"\n  * force 3 syllables\n\t* select categories\n* \"about\" thing, which says you shouldn't really use this\n\n*/\n\nconst projectNamerData = {\n\tassets: {\n\t\tprefixes: [],\n\t\tanimals: [],\n\t},\n};\n\nconst reduce = () => {\n\tconst categories = [\"prefixes\", \"animals\"];\n\tconst params = {};\n\tlet valid = true;\n\n\tfor (const category of categories) {\n\t\tparams[category] = getParamFromURL(category);\n\t\tif (!params[category] || params[category].length === 0) {\n\t\t\tvalid = false;\n\t\t}\n\t}\n\n\tconst currentFiltersDiv = document.querySelector(\".currentFilters\");\n\n\tcurrentFiltersDiv.classList.add(\"hide\");\n\n\tif (valid) {\n\t\tconst currentFiltersListElement = document.createElement(\"div\");\n\t\tcurrentFiltersListElement.classList.add(\"currentFiltersList\");\n\t\tlet listHTML = \"<ul>\";\n\n\t\tfor (const category of categories) {\n\t\t\tconst categoryParams = params[category].split(\",\");\n\t\t\tconst outputs = [];\n\n\t\t\tfor (const categoryParam of categoryParams) {\n\t\t\t\tfor (const item of projectNamerData.assets[category]) {\n\t\t\t\t\tif (item.attributes.includes(categoryParam)) {\n\t\t\t\t\t\tif (!outputs.includes(item)) {\n\t\t\t\t\t\t\toutputs.push(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprojectNamerData.assets[category] = outputs;\n\n\t\t\tlistHTML += `<li>${ucfirst(category)}: ${categoryParams.join(\", \")}</li>`;\n\t\t}\n\n\t\tlistHTML += \"</ul>\";\n\t\tcurrentFiltersListElement.innerHTML = listHTML;\n\t\tcurrentFiltersDiv\n\t\t\t.querySelector(\"details\")\n\t\t\t.append(currentFiltersListElement);\n\t\tcurrentFiltersDiv.classList.remove(\"hide\");\n\t}\n\tstart();\n};\n\nconst writeThing = (arrayName, elementClass) => {\n\tconst array = projectNamerData.assets[arrayName];\n\tconst randomThing = array[Math.floor(Math.random() * array.length)];\n\tdocument.querySelector(`.${elementClass}`).textContent = ucfirst(\n\t\trandomThing.title,\n\t);\n};\n\nconst generate = () => {\n\twriteThing(\"prefixes\", \"prefix\");\n\twriteThing(\"animals\", \"animal\");\n\n\t// const iterations = 60;\n\tconst iterations = 30;\n\tconst currentIteration = 0;\n\n\twriteOneThing(currentIteration, iterations);\n};\n\nconst writeOneThing = (currentIteration, iterations) => {\n\tif (Math.round(Math.random()) < 0.5) {\n\t\twriteThing(\"prefixes\", \"prefix\");\n\t} else {\n\t\twriteThing(\"animals\", \"animal\");\n\t}\n\n\tconst nextIteration = currentIteration + 1;\n\n\tif (nextIteration < iterations) {\n\t\twindow.setTimeout(() => {\n\t\t\twriteOneThing(nextIteration, iterations);\n\t\t}, nextIteration * 3);\n\t}\n};\n\nconst start = () => {\n\tvar spinster = document.querySelector(\".spinner\");\n\tspinster.remove();\n\n\tgenerate();\n};\n\nconst checkLoadedStates = (objectName, response, next) => {\n\tprojectNamerData.assets[objectName] = JSON.parse(response);\n\tif (\n\t\tprojectNamerData.assets.prefixes.length > 0 &&\n\t\tprojectNamerData.assets.animals.length > 0\n\t) {\n\t\tnext();\n\t}\n};\n\nconst getAttributes = (category) => {\n\tconst categoryData = projectNamerData.assets[category];\n\tconst foundAttributes = [];\n\tfor (const item of categoryData) {\n\t\tfor (const itemAttribute of item.attributes) {\n\t\t\tif (foundAttributes.indexOf(itemAttribute) === -1) {\n\t\t\t\tfoundAttributes.push(itemAttribute);\n\t\t\t}\n\t\t}\n\t}\n\tfoundAttributes.sort();\n\n\tconsole.log(`attributes found for ${category}:`);\n\tconsole.log(foundAttributes);\n\treturn foundAttributes;\n};\n\nconst countOutputs = () => {\n\tconst categories = [\"prefixes\", \"animals\"];\n\tlet valid = true;\n\n\tfor (const category of categories) {\n\t\tconst fieldset = document.querySelector(`#${category}`);\n\t\tconst fieldsetButtons = fieldset.querySelector(\".buttonContainer\");\n\t\tconst outputs = [];\n\t\tconst attributes = fieldset.querySelectorAll(\"input:checked\");\n\t\t// console.log(attributes);\n\t\tfor (const attribute of attributes) {\n\t\t\tfor (const item of projectNamerData.assets[category]) {\n\t\t\t\tif (item.attributes.includes(attribute.value)) {\n\t\t\t\t\tif (!outputs.includes(item)) {\n\t\t\t\t\t\toutputs.push(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (outputs.length === 0) {\n\t\t\tvalid = false;\n\t\t}\n\n\t\twhile (fieldset.querySelector(\".countHolder\")) {\n\t\t\tfieldset.querySelector(\".countHolder\").remove();\n\t\t}\n\n\t\tconst countHolder = document.createElement(\"div\");\n\t\tcountHolder.classList.add(\"countHolder\");\n\t\tcountHolder.textContent = `${outputs.length} ${category} matched`;\n\t\tfieldset.insertBefore(countHolder, fieldsetButtons);\n\n\t\tconsole.log(`matched: ${outputs.map((item) => item.title)}`);\n\t}\n\n\tconst goButton = document.querySelector(\"#go\");\n\tgoButton.disabled = !valid;\n};\n\nconst setAllAttributes = (element, check) => {\n\tconst fieldset = element.closest(\"fieldset\");\n\tconst checkboxes = fieldset.querySelectorAll(\"input\");\n\n\tfor (const checkbox of checkboxes) {\n\t\tcheckbox.checked = check;\n\t}\n\n\tcountOutputs();\n};\n\nconst writeOptions = () => {\n\tconst categories = [\n\t\t{\n\t\t\tname: \"prefixes\",\n\t\t},\n\t\t{\n\t\t\tname: \"animals\",\n\t\t},\n\t];\n\n\tfor (const category of categories) {\n\t\tcategory.attributes = getAttributes(category.name);\n\t\tconst categoryParams = getParamFromURL(category.name);\n\t\tconst categoryParamsArray = categoryParams\n\t\t\t? categoryParams.split(\",\")\n\t\t\t: undefined;\n\n\t\tconst fieldset = document.querySelector(`fieldset#${category.name}`);\n\n\t\tfor (const attribute of category.attributes) {\n\t\t\tconst inputElement = document.createElement(\"input\");\n\t\t\tconst inputName = `cb-${category.name}-${attribute}`;\n\t\t\tinputElement.type = \"checkbox\";\n\t\t\tinputElement.name = inputName;\n\t\t\tinputElement.id = inputName;\n\t\t\tinputElement.value = attribute;\n\t\t\tif (\n\t\t\t\tcategoryParamsArray === undefined ||\n\t\t\t\tcategoryParamsArray.includes(attribute)\n\t\t\t) {\n\t\t\t\tinputElement.checked = \"checked\";\n\t\t\t}\n\t\t\tinputElement.addEventListener(\"change\", () => {\n\t\t\t\tcountOutputs();\n\t\t\t});\n\n\t\t\tconst labelElement = document.createElement(\"label\");\n\t\t\tlabelElement.setAttribute(\"for\", inputName);\n\t\t\tlabelElement.textContent = attribute;\n\n\t\t\tconst containerElement = document.createElement(\"div\");\n\t\t\tcontainerElement.classList.add(\"attribute\");\n\t\t\tcontainerElement.append(inputElement);\n\t\t\tcontainerElement.append(labelElement);\n\t\t\tfieldset.append(containerElement);\n\t\t}\n\n\t\tconst allButton = document.createElement(\"button\");\n\t\tallButton.textContent = \"All\";\n\t\tallButton.id = `all-${category.name}`;\n\t\tallButton.addEventListener(\"click\", (event) => {\n\t\t\tsetAllAttributes(event.target, true);\n\t\t});\n\n\t\tconst noneButton = document.createElement(\"button\");\n\t\tnoneButton.textContent = \"None\";\n\t\tnoneButton.id = `none-${category.name}`;\n\t\tnoneButton.addEventListener(\"click\", (event) => {\n\t\t\tsetAllAttributes(event.target, false);\n\t\t});\n\n\t\tconst buttonContainer = document.createElement(\"div\");\n\t\tbuttonContainer.classList.add(\"buttonContainer\");\n\t\tbuttonContainer.append(allButton, noneButton);\n\n\t\tfieldset.append(buttonContainer);\n\t}\n\n\tcountOutputs();\n};\n\nconst go = () => {\n\tconsole.log(\"go\");\n\tconst categories = [\"prefixes\", \"animals\"];\n\tconst categoryStrings = [];\n\n\tfor (const category of categories) {\n\t\tconst selectedAttributes = [];\n\t\tconst fieldset = document.querySelector(`fieldset#${category}`);\n\t\tconst checkedOptions = fieldset.querySelectorAll(`input:checked`);\n\t\tfor (const checkedOption of checkedOptions) {\n\t\t\tselectedAttributes.push(checkedOption.value);\n\t\t}\n\n\t\tcategoryStrings.push(`${category}=${selectedAttributes.join(\",\")}`);\n\t}\n\n\tdocument.location.href = `/?${categoryStrings.join(\"&\")}`;\n};\n\nconst setupOptions = () => {\n\tconsole.log(\"setupOptions\");\n\tgetData(\"prefixes\", checkLoadedStates, writeOptions);\n\tgetData(\"animals\", checkLoadedStates, writeOptions);\n\n\tdocument.querySelector(\"#go\").addEventListener(\"click\", () => {\n\t\tgo();\n\t});\n};\n\nconst setupMain = () => {\n\tconst spinster = document.createElement(\"div\");\n\tconst headline = document.querySelector(\"h1\");\n\tspinster.classList.add(\"spinner\");\n\theadline.after(spinster);\n\tnew Spinner(spinnerConfig).spin(spinster); // eslint-disable-line no-undef\n\n\tdocument.querySelector(\".another\").addEventListener(\"click\", () => {\n\t\tgenerate();\n\t});\n\tdocument.querySelector(\".prefix\").addEventListener(\"click\", () => {\n\t\twriteThing(\"prefixes\", \"prefix\");\n\t});\n\tdocument.querySelector(\".animal\").addEventListener(\"click\", () => {\n\t\twriteThing(\"animals\", \"animal\");\n\t});\n\n\tgetData(\"prefixes\", checkLoadedStates, reduce);\n\tgetData(\"animals\", checkLoadedStates, reduce);\n};\n\nconst initProjectNamer = () => {\n\tdocument.documentElement.classList.add(\"js\");\n\n\tdocument.querySelector(\"#menu-trigger\").addEventListener(\"click\", (event) => {\n\t\tevent.target.closest(\"nav\").classList.toggle(\"open\");\n\t});\n\n\tdocument.querySelector(\"#nav-options\").addEventListener(\"click\", (event) => {\n\t\tevent.preventDefault();\n\t\tconst searchStr = document.location.search;\n\t\tdocument.location.href = `/options/${searchStr}`;\n\t});\n\n\tif (document.querySelector(\"main.namer\")) {\n\t\tsetupMain();\n\t}\n\tif (document.querySelector(\"main.options\")) {\n\t\tsetupOptions();\n\t}\n};\n\nwindow.addEventListener(\"load\", initProjectNamer);\n"],
  "mappings": "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",
  "names": ["getData", "objectName", "callback", "next", "xhttp", "spinnerConfig", "spinner_config_default", "ucfirst", "str", "getParamFromURL", "param", "urlParam", "params", "projectNamerData", "reduce", "categories", "params", "valid", "category", "getParamFromURL", "currentFiltersDiv", "currentFiltersListElement", "listHTML", "categoryParams", "outputs", "categoryParam", "item", "ucfirst", "start", "writeThing", "arrayName", "elementClass", "array", "randomThing", "generate", "writeOneThing", "currentIteration", "iterations", "nextIteration", "spinster", "checkLoadedStates", "objectName", "response", "next", "getAttributes", "categoryData", "foundAttributes", "itemAttribute", "countOutputs", "fieldset", "fieldsetButtons", "attributes", "attribute", "countHolder", "goButton", "setAllAttributes", "element", "check", "checkboxes", "checkbox", "writeOptions", "categoryParamsArray", "inputElement", "inputName", "labelElement", "containerElement", "allButton", "event", "noneButton", "buttonContainer", "go", "categoryStrings", "selectedAttributes", "checkedOptions", "checkedOption", "setupOptions", "getData", "setupMain", "headline", "spinner_config_default", "initProjectNamer", "searchStr"]
}
