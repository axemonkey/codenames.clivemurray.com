{
  "version": 3,
  "sources": ["../../assets/js/modules/get-data.js", "../../assets/js/modules/spinner-config.js", "../../assets/js/modules/tools.js", "../../assets/js/main.js"],
  "sourcesContent": ["const getData = (objectName, callback, next) => {\n\tconst xhttp = new XMLHttpRequest();\n\txhttp.onreadystatechange = () => {\n\t\tif (xhttp.readyState === 4 && xhttp.status === 200) {\n\t\t\tcallback(objectName, xhttp.responseText, next);\n\t\t}\n\t};\n\txhttp.open('GET', `/public/data/${objectName}.json`, true);\n\txhttp.send();\n};\n\nexport {\n\tgetData,\n};\n\n", "const spinnerConfig = {\n\tlines: 13, // The number of lines to draw\n\tlength: 7, // The length of each line\n\twidth: 4, // The line thickness\n\tradius: 10, // The radius of the inner circle\n\tcorners: 1, // Corner roundness (0..1)\n\trotate: 0, // The rotation offset\n\tcolor: '#ddd', // #rgb or #rrggbb\n\tspeed: 1, // Rounds per second\n\ttrail: 60, // Afterglow percentage\n\tshadow: false, // Whether to render a shadow\n\thwaccel: true, // Whether to use hardware acceleration\n\tclassName: 'spin', // The CSS class to assign to the spinner\n\tzIndex: 2e9, // The z-index (defaults to 2000000000)\n\ttop: 'auto', // Top position relative to parent in px\n\tleft: 'auto', // Left position relative to parent in px\n};\n\nexport default spinnerConfig;\n", "const ucfirst = str => {\n\treturn str.slice(0, 1).toUpperCase() + str.slice(1).toLowerCase();\n};\n\nexport {ucfirst};\n", "import {getData} from './modules/get-data.js';\nimport spinnerConfig from './modules/spinner-config.js';\nimport {ucfirst} from './modules/tools.js';\n\n/*\n// eslint-disable-next-line no-warning-comments\nTODO:\n\n* add syllables to all data\n* create \"options\"\n  * force 3 syllables\n\t* select categories\n* \"about\" thing, which says you shouldn't really use this\n\n*/\n\nconst projectNamerData = {\n\tassets: {\n\t\tprefixes: [],\n\t\tanimals: [],\n\t},\n};\n\nconst writeThing = (arrayName, elementClass) => {\n\tconst array = projectNamerData.assets[arrayName];\n\tconst randomThing = array[Math.floor(Math.random() * array.length)];\n\tdocument.querySelector(`.${elementClass}`).textContent = ucfirst(randomThing.title);\n};\n\nconst generate = () => {\n\twriteThing('prefixes', 'prefix');\n\twriteThing('animals', 'animal');\n\n\t// const iterations = 60;\n\tconst iterations = 20;\n\tconst currentIteration = 0;\n\n\twriteOneThing(currentIteration, iterations);\n};\n\nconst writeOneThing = (currentIteration, iterations) => {\n\tif (Math.round(Math.random()) < 0.5) {\n\t\twriteThing('prefixes', 'prefix');\n\t} else {\n\t\twriteThing('animals', 'animal');\n\t}\n\n\tconst nextIteration = currentIteration + 1;\n\n\tif (nextIteration < iterations) {\n\t\twindow.setTimeout(() => {\n\t\t\twriteOneThing(nextIteration, iterations);\n\t\t}, nextIteration * 3);\n\t}\n};\n\nconst start = () => {\n\tvar spinster = document.querySelector('.spinner');\n\tspinster.remove();\n\n\tdocument.body.classList.add('js');\n\n\tgenerate();\n};\n\nconst checkLoadedStates = (objectName, response, next) => {\n\tprojectNamerData.assets[objectName] = JSON.parse(response);\n\tif (projectNamerData.assets.prefixes.length > 0 && projectNamerData.assets.animals.length > 0) {\n\t\tnext();\n\t}\n};\n\nconst getAttributes = category => {\n\tconst categoryData = projectNamerData.assets[category];\n\tconst foundAttributes = [];\n\tfor (const item of categoryData) {\n\t\tfor (const itemAttribute of item.attributes) {\n\t\t\tif (foundAttributes.indexOf(itemAttribute) === -1) {\n\t\t\t\tfoundAttributes.push(itemAttribute);\n\t\t\t}\n\t\t}\n\t}\n\tfoundAttributes.sort();\n\n\tconsole.log(`attributes found for ${category}:`);\n\tconsole.log(foundAttributes);\n\treturn foundAttributes;\n};\n\n\nconst countOutputs = () => {\n\tconst categories = ['prefixes', 'animals'];\n\tlet valid = true;\n\n\tfor (const category of categories) {\n\t\tconst fieldset = document.querySelector(`#${category}`);\n\t\tconst fieldsetButtons = fieldset.querySelector('.buttonContainer');\n\t\tconst outputs = [];\n\t\tconst attributes = fieldset.querySelectorAll('input:checked');\n\t\tconsole.log(attributes);\n\t\tfor (const attribute of attributes) {\n\t\t\tfor (const item of projectNamerData.assets[category]) {\n\t\t\t\tif (item.attributes.includes(attribute.value)) {\n\t\t\t\t\tif (!outputs.includes(item)) {\n\t\t\t\t\t\toutputs.push(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (outputs.length === 0) {\n\t\t\tvalid = false;\n\t\t}\n\n\t\twhile (fieldset.querySelector('.countHolder')) {\n\t\t\tfieldset.querySelector('.countHolder').remove();\n\t\t}\n\n\t\tconst countHolder = document.createElement('div');\n\t\tcountHolder.classList.add('countHolder');\n\t\tcountHolder.textContent = `${outputs.length} ${category} matched`;\n\t\tfieldset.insertBefore(countHolder, fieldsetButtons);\n\t}\n\n\tconst goButton = document.querySelector('#go');\n\t// if (valid) {\n\t// \tgoButton.disabled = false;\n\t// } else {}\n\t\tgoButton.disabled = !valid;\n};\n\nconst setAllAttributes = (element, check) => {\n\tconst fieldset = element.closest('fieldset');\n\tconst checkboxes = fieldset.querySelectorAll('input');\n\n\tfor (const checkbox of checkboxes) {\n\t\tcheckbox.checked = check;\n\t}\n\n\tcountOutputs();\n};\n\nconst writeOptions = () => {\n\tconst categories = [\n\t\t{\n\t\t\tname: 'prefixes',\n\t\t},\n\t\t{\n\t\t\tname: 'animals',\n\t\t},\n\t];\n\n\tfor (const category of categories) {\n\t\tcategory.attributes = getAttributes(category.name);\n\n\t\tconst fieldset = document.querySelector(`fieldset#${category.name}`);\n\n\t\tfor (const attribute of category.attributes) {\n\t\t\tconst inputElement = document.createElement('input');\n\t\t\tconst inputName = `cb-${category.name}-${attribute}`;\n\t\t\tinputElement.type = 'checkbox';\n\t\t\tinputElement.name = inputName;\n\t\t\tinputElement.id = inputName;\n\t\t\tinputElement.value = attribute;\n\t\t\tif (attribute.charAt(0) === 'p') {\n\t\t\t\tinputElement.checked = 'checked';\n\t\t\t}\n\t\t\tinputElement.addEventListener('change', () => {\n\t\t\t\tcountOutputs();\n\t\t\t});\n\n\t\t\tconst labelElement = document.createElement('label');\n\t\t\tlabelElement.setAttribute('for', inputName);\n\t\t\tlabelElement.textContent = attribute;\n\n\t\t\tconst containerElement = document.createElement('div');\n\t\t\tcontainerElement.classList.add('attribute');\n\t\t\tcontainerElement.append(inputElement);\n\t\t\tcontainerElement.append(labelElement);\n\t\t\tfieldset.append(containerElement);\n\t\t}\n\n\t\tconst allButton = document.createElement('button');\n\t\tallButton.textContent = 'All';\n\t\tallButton.id = `all-${category.name}`;\n\t\tallButton.addEventListener('click', event => {\n\t\t\tsetAllAttributes(event.target, true);\n\t\t});\n\n\t\tconst noneButton = document.createElement('button');\n\t\tnoneButton.textContent = 'None';\n\t\tnoneButton.id = `none-${category.name}`;\n\t\tnoneButton.addEventListener('click', event => {\n\t\t\tsetAllAttributes(event.target, false);\n\t\t});\n\n\t\tconst buttonContainer = document.createElement('div');\n\t\tbuttonContainer.classList.add('buttonContainer');\n\t\tbuttonContainer.append(allButton, noneButton);\n\n\t\tfieldset.append(buttonContainer);\n\t}\n\n\tcountOutputs();\n};\n\nconst go = () => {\n\tconsole.log('go');\n\tconst categories = ['prefixes', 'animals'];\n\tconst categoryStrings = [];\n\n\tfor (const category of categories) {\n\t\tconst selectedAttributes = [];\n\t\tconst fieldset = document.querySelector(`fieldset#${category}`);\n\t\tconst checkedOptions = fieldset.querySelectorAll(`input:checked`);\n\t\tfor (const checkedOption of checkedOptions) {\n\t\t\tselectedAttributes.push(checkedOption.value);\n\t\t}\n\n\t\tcategoryStrings.push(`${category}=${selectedAttributes.join(',')}`);\n\t}\n\n\tdocument.location.href = `/?${categoryStrings.join('&')}`;\n};\n\nconst setupOptions = () => {\n\tconsole.log('setupOptions');\n\tgetData('prefixes', checkLoadedStates, writeOptions);\n\tgetData('animals', checkLoadedStates, writeOptions);\n\n\tdocument.querySelector('#go').addEventListener('click', () => {\n\t\tgo();\n\t});\n};\n\nconst setupMain = () => {\n\tconst spinster = document.createElement('div');\n\tconst headline = document.querySelector('h1');\n\tspinster.classList.add('spinner');\n\theadline.after(spinster);\n\tnew Spinner(spinnerConfig).spin(spinster); // eslint-disable-line no-undef\n\n\tdocument.querySelector('.another').addEventListener('click', () => {\n\t\tgenerate();\n\t});\n\tdocument.querySelector('.prefix').addEventListener('click', () => {\n\t\twriteThing('prefixes', 'prefix');\n\t});\n\tdocument.querySelector('.animal').addEventListener('click', () => {\n\t\twriteThing('animals', 'animal');\n\t});\n\n\tgetData('prefixes', checkLoadedStates, start);\n\tgetData('animals', checkLoadedStates, start);\n};\n\nconst initProjectNamer = () => {\n\tdocument.documentElement.classList.add('js');\n\n\tdocument.querySelector('#menu-trigger').addEventListener('click', event => {\n\t\tevent.target.closest('nav').classList.toggle('open');\n\t});\n\n\tif (document.querySelector('main#namer')) {\n\t\tsetupMain();\n\t}\n\tif (document.querySelector('main#options')) {\n\t\tsetupOptions();\n\t}\n};\n\nwindow.addEventListener('load', initProjectNamer);\n"],
  "mappings": "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",
  "names": ["getData", "objectName", "callback", "next", "xhttp", "spinnerConfig", "spinner_config_default", "ucfirst", "str", "projectNamerData", "writeThing", "arrayName", "elementClass", "array", "randomThing", "ucfirst", "generate", "writeOneThing", "currentIteration", "iterations", "nextIteration", "start", "spinster", "checkLoadedStates", "objectName", "response", "next", "getAttributes", "category", "categoryData", "foundAttributes", "item", "itemAttribute", "countOutputs", "categories", "valid", "fieldset", "fieldsetButtons", "outputs", "attributes", "attribute", "countHolder", "goButton", "setAllAttributes", "element", "check", "checkboxes", "checkbox", "writeOptions", "inputElement", "inputName", "labelElement", "containerElement", "allButton", "event", "noneButton", "buttonContainer", "go", "categoryStrings", "selectedAttributes", "checkedOptions", "checkedOption", "setupOptions", "getData", "setupMain", "headline", "spinner_config_default", "initProjectNamer"]
}
